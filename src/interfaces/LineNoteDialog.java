/*
 * Copyright (C) 2014 Nathan
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package interfaces;

import interfaces.errors.AddedError;
import java.awt.HeadlessException;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import meta.LineNote;

/**
 *
 * @author Nathan
 */
public class LineNoteDialog extends javax.swing.JDialog {
    private final String basicRegex = "a-zA-Z0-9\\.\\$\\?\"!:;',\\-\\(\\)\\*\\\\\\/\\+ $";
    private LineNote note;
    private String characterName;
    private String error = "";
    DefaultComboBoxModel characterList;
    
    /**
     * Creates a new form AddLineNote
     * @param parent
     * @param modal
     * @param characterList the character list of the show
     */
    public LineNoteDialog(java.awt.Frame parent, boolean modal, DefaultComboBoxModel characterList) {
        super(parent, modal);
        this.characterList = characterList;
        initComponents();
    }
    
    /**
     * Creates a new form AddLineNote
     * @param parent
     * @param modal
     * @param characterList the character list of the show
     * @param note
     * @param character
     */
    public LineNoteDialog(java.awt.Frame parent, boolean modal, 
                       DefaultComboBoxModel characterList, LineNote note, String character) {
        super(parent, modal);
        this.characterList = characterList;        
        initComponents();
        this.lineNoteEditor.setText(note.getLine());
        this.pageTextField.setText(note.getPageNum());
        this.characterList.setSelectedItem(character);
        error = note.getError();
        switch(note.getNote()) {
            case "Dropped":
                RBDropped.setSelected(true);
                break;
            case "Added":
                RBAdded.setSelected(true);
                break;
            case "Jumped Line":
                RBJumpedLine.setSelected(true);
                break;
            case "Wrong Order":
                RBWrongOrder.setSelected(true);
                break;
            case "Wrong Word":
                RBWrongWord.setSelected(true);
                break;
            case "Called Line":
                RBCalledLine.setSelected(true);
                break;
            case "Check Line":
                RBCheckLine.setSelected(true);
                break;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        characterLabel = new javax.swing.JLabel();
        pageLabel = new javax.swing.JLabel();
        pageTextField = new javax.swing.JTextField();
        RBWrongWord = new javax.swing.JRadioButton();
        RBAdded = new javax.swing.JRadioButton();
        RBJumpedLine = new javax.swing.JRadioButton();
        RBWrongOrder = new javax.swing.JRadioButton();
        RBCalledLine = new javax.swing.JRadioButton();
        RBDropped = new javax.swing.JRadioButton();
        RBCheckLine = new javax.swing.JRadioButton();
        clearButton = new javax.swing.JButton();
        addNoteButton = new javax.swing.JButton();
        characterSelector = new javax.swing.JComboBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        lineNoteEditor = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        characterLabel.setText("Character:");

        pageLabel.setText("Page:");

        buttonGroup1.add(RBWrongWord);
        RBWrongWord.setText("Wrong Word");
        RBWrongWord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RBWrongWordActionPerformed(evt);
            }
        });

        buttonGroup1.add(RBAdded);
        RBAdded.setText("Added");
        RBAdded.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RBAddedActionPerformed(evt);
            }
        });

        buttonGroup1.add(RBJumpedLine);
        RBJumpedLine.setText("Jumped Line");
        RBJumpedLine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RBJumpedLineActionPerformed(evt);
            }
        });

        buttonGroup1.add(RBWrongOrder);
        RBWrongOrder.setText("Wrong Order");
        RBWrongOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RBWrongOrderActionPerformed(evt);
            }
        });

        buttonGroup1.add(RBCalledLine);
        RBCalledLine.setText("Called Line");

        buttonGroup1.add(RBDropped);
        RBDropped.setText("Dropped");
        RBDropped.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RBDroppedActionPerformed(evt);
            }
        });

        buttonGroup1.add(RBCheckLine);
        RBCheckLine.setText("Check Line");

        clearButton.setText("Clear");
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        addNoteButton.setText("Add Note");
        addNoteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addNoteButtonActionPerformed(evt);
            }
        });

        characterSelector.setModel(characterList);

        lineNoteEditor.setColumns(20);
        lineNoteEditor.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        lineNoteEditor.setLineWrap(true);
        lineNoteEditor.setRows(5);
        lineNoteEditor.setWrapStyleWord(true);
        jScrollPane2.setViewportView(lineNoteEditor);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(characterLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(characterSelector, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(pageLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(pageTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(addNoteButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(clearButton))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(RBJumpedLine)
                            .addComponent(RBWrongWord)
                            .addComponent(RBAdded))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 55, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(RBWrongOrder)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(140, 140, 140)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(RBCheckLine)
                                    .addComponent(RBDropped)))
                            .addComponent(RBCalledLine))))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {addNoteButton, clearButton});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(characterLabel)
                    .addComponent(pageLabel)
                    .addComponent(pageTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(characterSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(RBWrongWord)
                    .addComponent(RBWrongOrder)
                    .addComponent(RBDropped))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(RBAdded)
                    .addComponent(RBCalledLine)
                    .addComponent(RBCheckLine))
                .addGap(6, 6, 6)
                .addComponent(RBJumpedLine)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(clearButton)
                    .addComponent(addNoteButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        clearText();
    }//GEN-LAST:event_clearButtonActionPerformed

    private void addNoteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addNoteButtonActionPerformed
        if (lineNoteEditor == null || pageTextField == null || whichRadioButton() == null) {
            JOptionPane.showMessageDialog(this,
            "You need to fill out all the fields.",
            "Error",
            JOptionPane.ERROR_MESSAGE);
            
            return;
        }
        if (!isValidatedString(lineNoteEditor.getText(), "^[" + basicRegex + "]+$")) {
            JOptionPane.showMessageDialog(this,
            "You need to enter a string for the line.",
            "Validation Error",
            JOptionPane.ERROR_MESSAGE);
            
            return;
        }
        if (!isValidatedString(pageTextField.getText(), "^[0-9]+$")) {
            JOptionPane.showMessageDialog(this,
            "You need to enter a number for the page.",
            "Validation Error",
            JOptionPane.ERROR_MESSAGE);
            
            return;
        }
         
        
        characterName = characterSelector. getSelectedItem().toString();
        String line = lineNoteEditor.getText();
        String pageNum = pageTextField.getText();
        String mistake = whichRadioButton().getText();
        note = new LineNote(line, error, pageNum, mistake);
        if (errorIsInLine(mistake, line)) {
            JOptionPane.showMessageDialog(this, "String not found in the line.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        clearText();
        super.dispose();
    }//GEN-LAST:event_addNoteButtonActionPerformed

    private boolean errorIsInLine(String mistake, String line) throws HeadlessException {
        if (!mistake.equals("Called Line") && !mistake.equals("Check Line")) {
            if (!line.contains(error)) {
                if (!"Wrong Order".equals(mistake) && !"Added".equals(mistake)) {
                    return true;
                } else if (mistake.equals("Wrong Order")) {
                    String[] wrongWords = error.split("|");
                    // Special case for order, have to split + fiddle with things
                    if (!line.contains(wrongWords[0]) || !line.contains(wrongWords[1])) {
                        return true;
                    }
                } else if (mistake.equals("Added")) {
                    String[] words = error.split(",")[1].split("|");
                    if (!line.contains(words[0]) || !line.contains(words[1])) {
                        return true;
                    }
                }
            }
        }
        return false;
    }

    private void RBWrongWordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RBWrongWordActionPerformed
        error = showDialog("Enter the error.", 0);
    }//GEN-LAST:event_RBWrongWordActionPerformed

    private void RBWrongOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RBWrongOrderActionPerformed
        error = showDialog("Enter the error, putting the pipe\n"
                    + "symbol \"|\" in between the phrases", 1);
    }//GEN-LAST:event_RBWrongOrderActionPerformed

    private void RBDroppedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RBDroppedActionPerformed
        error = showDialog("Enter the dropped word.", 2);
    }//GEN-LAST:event_RBDroppedActionPerformed

    private void RBAddedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RBAddedActionPerformed
        /*error = showDialog("Enter the added word(s), a comma,\n"
                           + "then the word before and after,\n"
                           + "separated by the \"|\" symbol.", 3);*/
        String line;
        line = lineNoteEditor.getText();
        AddedError addedDialog = new AddedError(null, true, line);
        addedDialog.setVisible(true);
        boolean isNotValidString = true;
        while (isNotValidString) {
            String response = addedDialog.getNewLine();
            String regex = "^[" + basicRegex + "]+$";
            
            if (isValidatedString(response, regex)) {
                isNotValidString = false;
            } else {
                JOptionPane.showMessageDialog(this, "You need to enter a valid input.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            }
        }
        error = addedDialog.getNewLine();
        int amountOfErrors = addedDialog.getAmount();
        switch(amountOfErrors) {
            case(1):
                int at = indexOfDifference(error, line);
                error = error.substring(at, (error.length() - line.length()) + at);
                System.out.println("error: " + error);
                break;
        }
    }//GEN-LAST:event_RBAddedActionPerformed

    private void RBJumpedLineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RBJumpedLineActionPerformed
        error = showDialog("Enter the last line that was jumped over.", 4);
    }//GEN-LAST:event_RBJumpedLineActionPerformed

    private String showDialog(String message, int button) {
        String response = "";
        String regex = "^[" + basicRegex + "]+$";
        
        // Also allow the | character for wrong word or added
        if (button == 1 || button == 3) {
            regex = "^[ " + basicRegex + "\\|" + "]+$";
        }
        
        boolean isNotValidString = true;
        while (isNotValidString) {
            response = JOptionPane.showInputDialog(this, 
                       message, 
                       "Enter Error",
                       JOptionPane.INFORMATION_MESSAGE);
            // Special cases for wrong order
            if (button == 1 && !response.contains("|")) {
                    
                JOptionPane.showMessageDialog(this, "You need to use the '|' character.", "Validation Error", JOptionPane.ERROR_MESSAGE);
                continue;
            }
            if (button == 1 && 
                response.indexOf("|") == 0 ||
                response.indexOf("|") == response.length()-1) {
                    
                JOptionPane.showMessageDialog(this, "You need data on both sides of" +
                                                    " the '|' character.", "Validation Error", JOptionPane.ERROR_MESSAGE);
                continue;
            }
            if (button == 1 && 
                response.indexOf("|") != response.lastIndexOf("|")) {
                    
                JOptionPane.showMessageDialog(this, "You can only have one '|' character.", 
                                                    "Validation Error", JOptionPane.ERROR_MESSAGE);
                continue;
            }
            
            if (isValidatedString(response, regex)) {
                isNotValidString = false;
            } else {
                JOptionPane.showMessageDialog(this, "You need to enter a valid input.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            }
        }
        
        return response;
    }
    
    public static int indexOfDifference(CharSequence cs1, CharSequence cs2) {
        if (cs1 == cs2) {
            return -1;
        }
        if (cs1 == null || cs2 == null) {
            return 0;
        }
        int i;
        for (i = 0; i < cs1.length() && i < cs2.length(); ++i) {
            if (cs1.charAt(i) != cs2.charAt(i)) {
                break;
            }
        }
        if (i < cs2.length() || i < cs1.length()) {
            return i;
        }
        return -1;
    }
    
    /**
     * @return the line note
     */
    public LineNote getLineNote() {
        return note;
    }
    
    /**
     * @return the character name
     */
    public String getCharacterName() {
        return characterName;
    }
    
    private javax.swing.JRadioButton whichRadioButton() {
        if (RBWrongWord.isSelected()) {
            return RBWrongWord;
        } else if (RBWrongOrder.isSelected()) {
            return RBWrongOrder;
        } else if (RBDropped.isSelected()) {
            return RBDropped;
        } else if (RBAdded.isSelected()) {
            return RBAdded;
        } else if (RBCalledLine.isSelected()) {
            return RBCalledLine;
        } else if (RBCheckLine.isSelected()) {
            return RBCheckLine;
        } else if (RBJumpedLine.isSelected()) {
            return RBJumpedLine;
        }
        return null;
    }
    
    private void clearText() {
        pageTextField.setText("");
        lineNoteEditor.setText(""); 
        buttonGroup1.clearSelection();
    }
    
    private boolean isValidatedString(String str, String regex) {
        return str.matches(regex);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton RBAdded;
    private javax.swing.JRadioButton RBCalledLine;
    private javax.swing.JRadioButton RBCheckLine;
    private javax.swing.JRadioButton RBDropped;
    private javax.swing.JRadioButton RBJumpedLine;
    private javax.swing.JRadioButton RBWrongOrder;
    private javax.swing.JRadioButton RBWrongWord;
    private javax.swing.JButton addNoteButton;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel characterLabel;
    private javax.swing.JComboBox characterSelector;
    private javax.swing.JButton clearButton;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea lineNoteEditor;
    private javax.swing.JLabel pageLabel;
    private javax.swing.JTextField pageTextField;
    // End of variables declaration//GEN-END:variables
}
